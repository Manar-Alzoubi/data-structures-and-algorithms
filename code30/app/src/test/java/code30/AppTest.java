/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package code30;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    // Setting a key/value to your hashtable results in the value being in the data structure (after set , hashtable is not empty )
    @Test
    void setKeyValue()
    {
        HashTable<String, String> HashTable = new HashTable<>();
        HashTable.set("Carl", "Carl");
        HashTable.set("Sadan", "2015");
        HashTable.set("Elien", "2014");
        assertEquals(HashTable.isEmpty(),false);
    }
    // test if hashtable empty
    @Test
    void setKeyValueEmpty()
    {
        HashTable<String, String> HashTable = new HashTable<>();
        assertEquals(HashTable.isEmpty(),true);
    }
    // Retrieving based on a key returns the value stored
    @Test
    void keyReturnsValue()
    {
        HashTable<String, String> HashTable = new HashTable<>();
        HashTable.set("Sadan", "2015");
        HashTable.set("Elien", "2014");
        assertEquals(HashTable.get("Sadan"), "2015");
        assertEquals(HashTable.get("Elien"), "2014");
    }

    // Successfully returns null for a key that does not exist in the hashtable
    @Test
    void test4()
    {
        HashTable<String, String> HashTable = new HashTable<>();
        HashTable.set("Sadan", "2015");
        HashTable.set("Elien", "2014");
        assertEquals(HashTable.get("Manar"), null);
//        assertEquals(HashTable.get("Elien"), "2014");
    }

    // Successfully returns a list of all unique keys that exist in the hashtable
    @Test
    void test5()
    {
        HashTable<String, String> HashTable = new HashTable<>();
        HashTable.set("Sadan", "2015");
        HashTable.set("Elien", "2014");
        ArrayList<String> arrOfKeys = new ArrayList<>();
        arrOfKeys.add("Elien");
        arrOfKeys.add("Sadan");
        assertEquals(HashTable.keys(),arrOfKeys);
    }

    // Successfully handle a collision within the hashtable
    @Test
    void test6()
    {
        HashTable<String, String> HashTable = new HashTable<>();
        HashTable.set("Sadan", "2015");
        HashTable.set("Elien", "2014");
        HashTable.set("Elien", "2020");
        assertEquals(HashTable.hash("Elien"),3);
        assertEquals(HashTable.get("Elien"),"2014");
    }

    // Successfully retrieve a value from a bucket within the hashtable that has a collision
    @Test
    void test7()
    {
        HashTable<String, String> HashTable = new HashTable<>();
        HashTable.set("Sadan", "2015");
        HashTable.set("Elien", "2014");
        HashTable.set("Elien", "2020");
        HashTable.set("Elien", "2022");
//        System.out.println("\nThe index of => Elien" + " is => " + HashTable.hash("Elien"));
//        System.out.println("The index of => Elien" + " is => " + HashTable.hash("Elien"));
//        System.out.println("The index of => Elien" + " is => " + HashTable.hash("Elien"));
        assertEquals(HashTable.get("Elien"),"2014");
    }

    // Successfully hash a key to an in-range value
    @Test
    void test8()
    {
        HashTable<String, String> HashTable = new HashTable<>();
        HashTable.set("Sadan", "2015");
        assertTrue(0 <= HashTable.hash("Sadan") && HashTable.hash("Sadan") < 10);
            }

    /////////// code challenge 31   ///////////

    @Test
    void test11()
    {
        HashTable<String, String> HashTable = new HashTable<>();
        assertEquals(HashTable.repeatedWord("Once upon a time, there was a brave princess who..."),"a");
    }

    @Test
    void test22()
    {
        HashTable<String, String> HashTable = new HashTable<>();
        assertEquals(HashTable.repeatedWord("It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way – in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only..."),"it");
    }

    @Test
    void test33()
    {
        HashTable<String, String> HashTable = new HashTable<>();
        assertEquals(HashTable.repeatedWord("It was a queer, sultry summer, the summer they electrocuted the Rosenbergs, and I didn’t know what I was doing in New York..."),"summer");
    }

    @Test
    void test44()
    {
        HashTable<String, String> HashTable = new HashTable<>();
        assertEquals(HashTable.repeatedWord("1 2 1 3 1 4 1 5 1 6 1"),"1");
    }

}
