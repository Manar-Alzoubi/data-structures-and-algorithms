/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package code30;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    // Setting a key/value to your hashtable results in the value being in the data structure (after set , hashtable is not empty )
    @Test
    void setKeyValue()
    {
        HashTable<String, String> HashTable = new HashTable<>();
        HashTable.set("Carl", "Carl");
        HashTable.set("Sadan", "2015");
        HashTable.set("Elien", "2014");
        assertEquals(HashTable.isEmpty(),false);
    }
    // test if hashtable empty
    @Test
    void setKeyValueEmpty()
    {
        HashTable<String, String> HashTable = new HashTable<>();
        assertEquals(HashTable.isEmpty(),true);
    }
    // Retrieving based on a key returns the value stored
    @Test
    void keyReturnsValue()
    {
        HashTable<String, String> HashTable = new HashTable<>();
        HashTable.set("Sadan", "2015");
        HashTable.set("Elien", "2014");
        assertEquals(HashTable.get("Sadan"), "2015");
        assertEquals(HashTable.get("Elien"), "2014");
    }

    // Successfully returns null for a key that does not exist in the hashtable
    @Test
    void test4()
    {
        HashTable<String, String> HashTable = new HashTable<>();
        HashTable.set("Sadan", "2015");
        HashTable.set("Elien", "2014");
        assertEquals(HashTable.get("Manar"), null);
//        assertEquals(HashTable.get("Elien"), "2014");
    }

    // Successfully returns a list of all unique keys that exist in the hashtable
    @Test
    void test5()
    {
        HashTable<String, String> HashTable = new HashTable<>();
        HashTable.set("Sadan", "2015");
        HashTable.set("Elien", "2014");
        ArrayList<String> arrOfKeys = new ArrayList<>();
        arrOfKeys.add("Elien");
        arrOfKeys.add("Sadan");
        assertEquals(HashTable.keys(),arrOfKeys);
    }

    // Successfully handle a collision within the hashtable
    @Test
    void test6()
    {
        HashTable<String, String> HashTable = new HashTable<>();
        HashTable.set("Sadan", "2015");
        HashTable.set("Elien", "2014");
        HashTable.set("Elien", "2020");
        assertEquals(HashTable.hash("Elien"),3);
        assertEquals(HashTable.get("Elien"),"2014");
    }

    // Successfully retrieve a value from a bucket within the hashtable that has a collision
    @Test
    void test7()
    {
        HashTable<String, String> HashTable = new HashTable<>();
        HashTable.set("Sadan", "2015");
        HashTable.set("Elien", "2014");
        HashTable.set("Elien", "2020");
        HashTable.set("Elien", "2022");
//        System.out.println("\nThe index of => Elien" + " is => " + HashTable.hash("Elien"));
//        System.out.println("The index of => Elien" + " is => " + HashTable.hash("Elien"));
//        System.out.println("The index of => Elien" + " is => " + HashTable.hash("Elien"));
        assertEquals(HashTable.get("Elien"),"2014");
    }

    // Successfully hash a key to an in-range value
    @Test
    void test8()
    {
        HashTable<String, String> HashTable = new HashTable<>();
        HashTable.set("Sadan", "2015");
        assertTrue(0 <= HashTable.hash("Sadan") && HashTable.hash("Sadan") < 10);
            }
}
