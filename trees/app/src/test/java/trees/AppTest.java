/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package trees;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
//    @Test void appHasAGreeting() {
//        App classUnderTest = new App();
//        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
//    }
    //test Can successfully instantiate an empty tree
    @Test void emptyTreeTest ()
    {
        BinaryTree <Integer> biTree = new BinaryTree<>();
        assertEquals(biTree.getRoot(),null);
    }
    //Can successfully instantiate a tree with a single root node
    @Test void rootTreeTest2 ()
    {
        BinaryTree <Integer> biTree = new BinaryTree<>();
        biTree.setRoot(new Node<>(5));
        assertEquals(biTree.getRoot().getValue(),5);
    }
    //For a Binary Search Tree, can successfully add a left child and right child properly to a node
    @Test void binarySearchAddLeftRightTest ()
    {
        BinarySearchTree<Integer> binSearchT = new BinarySearchTree();
        binSearchT.add(60);
        binSearchT.add(40);
        binSearchT.add(80);
        assertEquals(binSearchT.toString(),"BinarySearchTree{root=Node{value=60, left=Node{value=40, left=null, right=null}, right=Node{value=80, left=null, right=null}}}");
    }
    //Can successfully return a collection from a preorder traversal
    @Test void returncollectionPreOrderTest ()
    {
    BinaryTree <Integer> biTree = new BinaryTree<>();
        biTree.setRoot(new Node<>(15));
        biTree.getRoot().setLeft(new Node<>(30));
        biTree.getRoot().setRight( new Node<>(25));
        biTree.getRoot().getLeft().setLeft(new Node<>(35));
        biTree.getRoot().getLeft().setRight(new Node<>(40));
        ArrayList arr = new ArrayList();
        arr.add(15);
        arr.add(30);
        arr.add(35);
        arr.add(40);
        arr.add(25);
//        assertEquals(biTree.preOrder(biTree.getRoot()), new int[]{15, 30, 35, 40, 25});
//        int []arr2 = {15,30,35,40,25};
//        assertTrue(biTree.preOrder(biTree.getRoot()),arr2));
        assertEquals(biTree.preOrder(biTree.getRoot()),arr);
    }
    //Can successfully return a collection from an inorder traversal
    @Test void returncollectionInOrderTest ()
    {
        BinaryTree <Integer> biTree = new BinaryTree<>();
        biTree.setRoot(new Node<>(15));
        biTree.getRoot().setLeft(new Node<>(30));
        biTree.getRoot().setRight( new Node<>(25));
        biTree.getRoot().getLeft().setLeft(new Node<>(35));
        biTree.getRoot().getLeft().setRight(new Node<>(40));
        ArrayList arr = new ArrayList();
        arr.add(35);
        arr.add(30);
        arr.add(40);
        arr.add(15);
        arr.add(25);

        assertEquals(biTree.inOrder(biTree.getRoot()),arr);
    }
    //Can successfully return a collection from a postorder traversal
    @Test void returncollectionPostOrderTest ()
    {
        BinaryTree <Integer> biTree = new BinaryTree<>();
        biTree.setRoot(new Node<>(15));
        biTree.getRoot().setLeft(new Node<>(30));
        biTree.getRoot().setRight( new Node<>(25));
        biTree.getRoot().getLeft().setLeft(new Node<>(35));
        biTree.getRoot().getLeft().setRight(new Node<>(40));
        ArrayList arr = new ArrayList();
        arr.add(35);
        arr.add(40);
        arr.add(30);
        arr.add(25);
        arr.add(15);
        assertEquals(biTree.postOrder(biTree.getRoot()),arr);
    }
    // contains methode return true if value is exsist
    @Test void containsTest ()
    {
        BinarySearchTree<Integer> binSearchT = new BinarySearchTree();
        binSearchT.add(50);
        binSearchT.add(30);
        binSearchT.add(40);
        binSearchT.add(20);
        binSearchT.add(60);
        assertTrue(binSearchT.contains(50));
        assertTrue(binSearchT.contains(30));
        assertTrue(binSearchT.contains(40));
        assertTrue(binSearchT.contains(20));
        assertTrue(binSearchT.contains(60));
    }
    // contains methode return false if value is not exsist
    @Test void containsTest2 ()
    {
        BinarySearchTree<Integer> binSearchT = new BinarySearchTree();
        binSearchT.add(50);
        binSearchT.add(30);
        binSearchT.add(40);
        binSearchT.add(20);
        binSearchT.add(60);
        assertEquals(binSearchT.contains(55),false);
        assertEquals(binSearchT.contains(39),false);
        assertEquals(binSearchT.contains(42),false);
        assertEquals(binSearchT.contains(26),false);
        assertEquals(binSearchT.contains(67),false);

    }
}
