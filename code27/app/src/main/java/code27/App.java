/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package code27;

import java.util.Arrays;

public class App {
    public static void main(String[] args) {
        int[] inputArray = new int[]{8, 4, 23, 42, 16, 15};
        System.out.println("\noriginal array ==>   " + Arrays.toString(inputArray));
        System.out.println("after merge sort ==> " + Arrays.toString(mergeSort(inputArray)) + "\n");
        mergeSort(inputArray);
        int[] reverseSorted = new int[]{20, 18, 12, 8, 5, -2};
        System.out.println("original array ==>   " + Arrays.toString(reverseSorted));
        System.out.println("after merge sort ==> " + Arrays.toString(mergeSort(reverseSorted)) + "\n");

        int[] fewUniques = new int[]{5, 12, 7, 5, 5, 7};
        System.out.println("original array ==>   " + Arrays.toString(fewUniques));
        System.out.println("after merge sort ==> " + Arrays.toString(mergeSort(fewUniques)) + "\n");

        int[] nearlySorted = new int[]{2, 3, 5, 7, 13, 11};
        System.out.println("original array ==>   " + Arrays.toString(nearlySorted));
        System.out.println("after merge sort ==> " + Arrays.toString(mergeSort(nearlySorted)) + "\n");
    }

    public static int[] mergeSort(int[] arr) {
        int n = arr.length;
        int mid = 0;
        if (n > 1) {
            mid = n / 2;
            int[] left = new int[mid];
            for (int i = 0; i < left.length; i++) {
                left[i] = arr[i];
            }
            int[] right = new int[n - mid];
            for (int i = 0; i < right.length; i++) {
                right[i] = arr[mid + i];
            }
            mergeSort(left);
            mergeSort(right);
            merge(left, right, arr);
        }
        return arr;
    }

    public static int[] merge(int[] left, int[] right, int[] arr) {
        int i = 0;
        int j = 0;
        int k = 0;
        while (i < left.length && j < right.length) {
            if (left[i] <= right[j]) {
                arr[k] = left[i];
                i++;
            } else {
                arr[k] = right[j];
                j++;
            }
            k = k + 1;
        }
        if (i == left.length) {
            while (j < right.length) {
                arr[k] = right[j];
                j++;
                k++;
            }
        }
        if (j == right.length) {
            while (i < left.length) {
                arr[k] = left[i];
                i++;
                k++;
            }
        }
        return arr;
    }
}