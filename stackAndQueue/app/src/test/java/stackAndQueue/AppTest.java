/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stackAndQueue;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.EmptyStackException;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    Stack<String> newStack = new Stack<>();
    Queue<String> newQueue = new Queue<>();

    @BeforeEach
    void setUp() {
        newStack = new Stack();
        newQueue = new Queue<>();
    }

    @Test //Can successfully push onto a stack (on empty stack)
    @DisplayName("testStackPush")
    void testStackPush() {
       newStack.push("Manar");
        assertEquals(newStack.peek(),"Manar");
    }
    @Test //Can successfully push multiple values onto a stack
    @DisplayName("testStackPush2values")
    void testStackPush2values() {
        newStack.push("Manar");
        newStack.push("Sadan");
        assertEquals(newStack.toString(),"Stack{top=Node{value=Sadan}, next=Node{value=Manar}, next=null}   {size= 2}");
    }

    @Test //Can successfully pop off the stack
    void testStackPop() {
        newStack.push("Manar");
        newStack.push("Sadan");
        newStack.pop();
        assertEquals(newStack.toString(),"Stack{top=Node{value=Manar}, next=null}   {size= 1}");
    }
    //Can successfully empty a stack after multiple pops
    @Test
    void testEmptyStackAfterPop() {
        newStack.push("Manar");
        newStack.push("Sadan");
        newStack.pop();
        newStack.pop();
        assertEquals(newStack.toString(),"Stack{top=null}   {size= 0}");
    }

    //Can successfully peek the next item on the stack
    @Test
    void testPeekSecondElement() {
        newStack.push("Manar");
        newStack.push("Sadan");
        assertEquals(newStack.peek(),"Sadan");
    }
    //Can successfully instantiate an empty stack
    @Test
    void testInstantiateEmptyStack() {
        assertEquals(newStack.isEempty(),true);
    }
    //Calling pop or peek on empty stack raises exception
//    @Test
//    void testPopEmptyStack() {
//        assertEquals(newStack.pop(),"java.util.EmptyStackException at AppTest.java:69" );
//    }
    // Can successfully enqueue into a queue
    @Test
    void testQueueEnqueue() {
        newQueue.enqueue("LOLO");
        assertEquals(newQueue.peek(),"LOLO");
    }
    //Can successfully enqueue multiple values into a queue
    @Test
    void testEnqueue2values() {
        newQueue.enqueue("Manar");
        newQueue.enqueue("Sadan");
        assertEquals(newQueue.toString(),"Queue{back=  Node{value=Sadan}, next=Node{value=Manar}, next=null, front=  Node{value=Manar}, next=null, size=  2}");
    }
    //Can successfully dequeue out of a queue the expected value
    @Test
    void testDequeuvalues() throws Exception {
        newQueue.enqueue("Manar");
        newQueue.enqueue("Sadan");
        newQueue.dequeue();
        assertEquals(newQueue.toString(),"Queue{back=  Node{value=Sadan}, next=Node{value=Manar}, next=null, front=  Node{value=Sadan}, next=Node{value=Manar}, next=null, size=  1}");
    }
    //Can successfully peek into a queue, seeing the expected value
    @Test
    void testPeekQueue() throws Exception {
        newQueue.enqueue("Manar");
        newQueue.enqueue("Sadan");
        newQueue.peek();
        assertEquals(newQueue.peek(),"Manar");
    }
    //Can successfully empty a queue after multiple dequeues
    @Test
    void testEmptyQueue() throws Exception {
        newQueue.enqueue("Manar");
        newQueue.dequeue();
        assertEquals(newQueue.isEmpty(),false);
    }
    //Can successfully instantiate an empty queue
    @Test
    void testInstantiateEmptyQueue() throws Exception {
        assertEquals(newQueue.isEmpty(),true);
    }
    // Calling dequeue or peek on empty queue raises exception
    @Test
    void testPeekEmptyQueue() throws Exception {
    assertEquals(newQueue.peek(),null);

    }
}
