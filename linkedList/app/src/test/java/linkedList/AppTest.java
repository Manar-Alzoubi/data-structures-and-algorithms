
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linkedList;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

//import java.util.LinkedList;


class AppTest {
    // find kth node from the end Where k is greater than the length of the linked list
    @Test
    void kIsGreater()
    {
        linkedList1<String> myList = new linkedList1();
        myList.insertNode("A");
        myList.insertNode("B");
        myList.insertNode("C");

        assertTrue(myList.KthFromLast(5) == "greater");
    }

    //  find kth node from the end Where k and the length of the list are the same
    @Test void KthSameAsLength()
    {
        linkedList1<String> myList = new linkedList1();
        myList.insertNode("A");
        myList.insertNode("B");
        assertTrue(myList.KthFromLast(1) == "B");
    }

    // find kth node from the end Where k is not a positive integer
    @Test void KIsNegative(){
        linkedList1<String> myList = new linkedList1();
        myList.insertNode("A");
        myList.insertNode("B");
        assertTrue(myList.KthFromLast(-1) == "negative");
    }

    // find kth node from the end Where the linked list is of a size 1
    @Test void sizeOneTest()
    {
        linkedList1<String> myList = new linkedList1();
        myList.insertNode("A");
        assertTrue(myList.KthFromLast(0) == "A");
    }
    // Happy Path where k is not at the end, but somewhere in the middle of the linked list
    @Test void happyPathTest(){
        linkedList1<String> myList = new linkedList1();
        myList.insertNode("A");
        myList.insertNode("B");
        myList.insertNode("C");
        myList.insertNode("D");
        myList.insertNode("E");
        myList.insertNode("F");

        assertTrue(myList.KthFromLast(1) == "B");
        assertTrue(myList.KthFromLast(2) == "C");
        assertTrue(myList.KthFromLast(3) == "D");
        assertTrue(myList.KthFromLast(4) == "E");

    }




}