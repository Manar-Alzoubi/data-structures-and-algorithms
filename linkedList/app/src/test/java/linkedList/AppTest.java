/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linkedList;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

//import java.util.LinkedList;


class AppTest {
    // find kth node from the end Where k is greater than the length of the linked list
    @Test
    void kIsGreater()
    {
        linkedList1<String> myList = new linkedList1();
        myList.insertNode("A");
        myList.insertNode("B");
        myList.insertNode("C");

        assertTrue(myList.KthFromLast(5) == "greater");
    }

    //  find kth node from the end Where k and the length of the list are the same
    @Test void KthSameAsLength()
    {
        linkedList1<String> myList = new linkedList1();
        myList.insertNode("A");
        myList.insertNode("B");
        assertTrue(myList.KthFromLast(1) == "B");
    }

    // find kth node from the end Where k is not a positive integer
    @Test void KIsNegative(){
        linkedList1<String> myList = new linkedList1();
        myList.insertNode("A");
        myList.insertNode("B");
        assertTrue(myList.KthFromLast(-1) == "negative");
    }

    // find kth node from the end Where the linked list is of a size 1
    @Test void sizeOneTest()
    {
        linkedList1<String> myList = new linkedList1();
        myList.insertNode("A");
        assertTrue(myList.KthFromLast(0) == "A");
    }
    // Happy Path where k is not at the end, but somewhere in the middle of the linked list
    @Test void happyPathTest(){
        linkedList1<String> myList = new linkedList1();
        myList.insertNode("A");
        myList.insertNode("B");
        myList.insertNode("C");
        myList.insertNode("D");
        myList.insertNode("E");
        myList.insertNode("F");

        assertTrue(myList.KthFromLast(1) == "B");
        assertTrue(myList.KthFromLast(2) == "C");
        assertTrue(myList.KthFromLast(3) == "D");
        assertTrue(myList.KthFromLast(4) == "E");

    }

    @Test
    void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
//  empty linked list test
    @Test
    void emptyListTest()
    {
        linkedList1<String> myList = new linkedList1();
        assertTrue(myList.head==null);
    }

//   insert into the linked list Test
    @Test
    void insertTest()
    {
        linkedList1<String> myList = new linkedList1();
       myList.insertNode("C");
       assertTrue(myList.includes("C")== true);
    }
//  head point to the first node
    @Test
    void pointToFirstTest()
    {
        linkedList1<String> myList = new linkedList1();
        myList.insertNode("D");
        assertTrue(myList.head.value=="D");
    }


    //    return true when finding a value exist "string"
    @Test
    void valueExistTest2()
    {
        linkedList1<String> myList = new linkedList1();
        myList.insertNode("15");
        myList.insertNode("Manar");
        myList.insertNode("AB2");

        assertTrue(myList.includes("AB2")== true);

    }
    //    return false when finding a value exist  "Integer"
    @Test
    void valueExistTest3()
    {
        linkedList1<Integer> myList = new linkedList1();
        myList.insertNode(10);
        myList.insertNode(15);
        myList.insertNode(70);
        assertTrue(myList.includes(55)== false);
        assertTrue(myList.includes(85)== false);

    }
    //    return true when finding a value exist "string"
    @Test
    void valueExistTest4()
    {
        linkedList1<String> myList = new linkedList1();
        myList.insertNode("15");
        myList.insertNode("Manar");
        myList.insertNode("AB2");

        assertTrue(myList.includes("aB2")== false);
        assertTrue(myList.includes("manar")== false);


    }

    //    return all the values that exist in the linked list
    @Test
    void printListTest()
    {
        linkedList1<String> myList = new linkedList1();
        myList.insertNode("15");
        myList.insertNode("Manar");
        assertTrue(myList.toString().compareTo("\"{Manar}->{15}->NULL\"") ==0);
        assertTrue(myList.toString().compareTo("{Manar}->{15}->NULL") !=0);

    }
    // add a node to the end of the linked list
    @Test void addAtEnd()
    {
        linkedList1<String> myList = new linkedList1();
        myList.append("Z");
        assertTrue(( myList.head.next== null) == true);

    }
    // add multiple nodes to the end of a linked list
    @Test
    void addMultipleEnd(){
        linkedList1<String> myList = new linkedList1();
        myList.append("G");
        myList.append("Z");
        assertTrue(myList.head.value =="G" && myList.head.next.value=="Z" && myList.head.next.next== null);

    }

// insert a node before a node located i the middle of a linked list
    @Test void nodeatmiddle(){
        linkedList1<String> myList = new linkedList1();
        myList.insertNode("me");
        myList.insertNode("K");
        myList.addBefore("me", "T");
        assertTrue(( myList.head.value=="K" &&myList.head.next.value == "T" && myList.head.next.next.value== "me")==true);
    }
    //  insert a node before the first node of a linked list
    @Test void insertBeforeFirst() {
        linkedList1<String> myList = new linkedList1();
        myList.insertNode("A");
        myList.addBefore("A","L");
        assertTrue(myList.head.value == "L"  && myList.head.next.value== "A");

    }
}