/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package leftjoin;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void Test1() {

        LeftJoin leftJoinObj = new LeftJoin();
        HashTable<String, String> HashTable = new HashTable<String,String>();
        HashTable.set("diligent", "employed");
        HashTable.set("fond", "enamored");
        HashTable.set("guide", "usher");
        HashTable.set("outfit", "garb");
        HashTable.set("wrath", "anger");

        HashTable<String, String> HashTable2 = new HashTable<String,String>();
        HashTable2.set("diligent", "idle");
        HashTable2.set("fond", "averse");
        HashTable2.set("guide", "follow");
        HashTable2.set("flow", "jam");
        HashTable2.set("wrath", "delight");
        List<String> leftJoinList = new ArrayList<>();
        leftJoinList.add(" [ " + "diligent" +  " , " + "employed"+ " , " + "idle"+ " ]  ");
        leftJoinList.add(" [ " + "wrath" +  " , " + "anger"+ " , " + "delight"+ " ]  ");
        leftJoinList.add(" [ " + "fond" +  " , " + "enamored"+ " , " + "averse"+ " ]  ");
        leftJoinList.add(" [ " + "guide" +  " , " + "usher"+ " , " + "follow"+ " ]  ");
        leftJoinList.add(" [ " + "outfit" +  " , " + "garb"+ " , " + "null"+ " ]  ");
        assertEquals(leftJoinList,leftJoinObj.leftJoin(HashTable,HashTable2));

    }

    @Test void Test2() {

        LeftJoin leftJoinObj = new LeftJoin();
        HashTable<String, String> HashTable = new HashTable<String,String>();
        HashTable.set("diligent", "employed");
        HashTable.set("x", "enamored");
        HashTable.set("4", "usher");
        HashTable.set("mmmmm", "garb");
        HashTable.set("wrath", "anger");

        HashTable<String, String> HashTable2 = new HashTable<String,String>();
        HashTable2.set("diligent", "idle");
        HashTable2.set("fond", "averse");
        HashTable2.set("guide", "follow");
        HashTable2.set("flow", "jam");
        HashTable2.set("wrath", "delight");

        List<String> leftJoinList = new ArrayList<>();
        leftJoinList.add(" [ " + "diligent" +  " , " + "employed"+ " , " + "idle"+ " ]  ");
        leftJoinList.add(" [ " + "wrath" +  " , " + "anger"+ " , " + "delight"+ " ]  ");
        leftJoinList.add(" [ " + "x" +  " , " + "enamored"+ " , " + "null"+ " ]  ");
        leftJoinList.add(" [ " + "4" +  " , " + "usher"+ " , " + "null"+ " ]  ");
        leftJoinList.add(" [ " + "mmmmm" +  " , " + "garb"+ " , " + "null"+ " ]  ");
        assertEquals(leftJoinList,leftJoinObj.leftJoin(HashTable,HashTable2));
    }

    ///////// test if hashtable1 has elements less than hashtable 2 // the result is list of hashtable 1 entries
    @Test void Test3() {
        LeftJoin leftJoinObj = new LeftJoin();
        HashTable<String, String> HashTable = new HashTable<String,String>();
        HashTable.set("x", "enamored");
        HashTable.set("4", "usher");
        HashTable.set("mmmmm", "garb");

        HashTable<String, String> HashTable2 = new HashTable<String,String>();
        HashTable2.set("diligent", "idle");
        HashTable2.set("fond", "averse");
        HashTable2.set("guide", "follow");
        HashTable2.set("flow", "jam");
        HashTable2.set("wrath", "delight");

        List<String> leftJoinList = new ArrayList<>();
        leftJoinList.add(" [ " + "x" +  " , " + "enamored"+ " , " + "null"+ " ]  ");
        leftJoinList.add(" [ " + "4" +  " , " + "usher"+ " , " + "null"+ " ]  ");
        leftJoinList.add(" [ " + "mmmmm" +  " , " + "garb"+ " , " + "null"+ " ]  ");
        assertEquals(leftJoinList,leftJoinObj.leftJoin(HashTable,HashTable2));
    }

    ///////// test if hashtable1 is empty // the result is empty list
    @Test void Test4() {

        LeftJoin leftJoinObj = new LeftJoin();
        HashTable<String, String> HashTable = new HashTable<String,String>();

        HashTable<String, String> HashTable2 = new HashTable<String,String>();
        HashTable2.set("diligent", "idle");
        HashTable2.set("fond", "averse");
        HashTable2.set("guide", "follow");
        HashTable2.set("flow", "jam");
        HashTable2.set("wrath", "delight");

        List<String> leftJoinList = new ArrayList<>();

        assertEquals(leftJoinList,leftJoinObj.leftJoin(HashTable,HashTable2));
    }
///////// test if hashtable2 is empty // the result is hashtable 1 with null at last entry
    @Test void Test5() {
        LeftJoin leftJoinObj = new LeftJoin();
        HashTable<String, String> HashTable = new HashTable<String,String>();

        HashTable.set("x", "enamored");
        HashTable.set("4", "usher");
        HashTable.set("mmmmm", "garb");


        HashTable<String, String> HashTable2 = new HashTable<String,String>();

        List<String> leftJoinList = new ArrayList<>();
        leftJoinList.add(" [ " + "x" +  " , " + "enamored"+ " , " + "null"+ " ]  ");
        leftJoinList.add(" [ " + "4" +  " , " + "usher"+ " , " + "null"+ " ]  ");
        leftJoinList.add(" [ " + "mmmmm" +  " , " + "garb"+ " , " + "null"+ " ]  ");
        assertEquals(leftJoinList,leftJoinObj.leftJoin(HashTable,HashTable2));
    }
}
