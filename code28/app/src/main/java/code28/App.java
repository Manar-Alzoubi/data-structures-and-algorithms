/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package code28;

import java.util.Arrays;

public class App {
    public static void main(String[] args) {

        int[] inputArray = new int[]{8, 4, 23, 42, 16, 15};
        System.out.println("\noriginal array ==>   " + Arrays.toString(inputArray));
        System.out.println("after quick sort ==> " + Arrays.toString(quickSort(inputArray, 0, inputArray.length - 1)) + "\n");

        int[] reverseSorted = new int[]{20, 18, 12, 8, 5, -2};
        System.out.println("original array ==>   " + Arrays.toString(reverseSorted));
        System.out.println("after quick sort ==> " + Arrays.toString(quickSort(reverseSorted, 0, reverseSorted.length - 1)) + "\n");

        int[] fewUniques = new int[]{5, 12, 7, 5, 5, 7};
        System.out.println("original array ==>   " + Arrays.toString(fewUniques));
        System.out.println("after quick sort ==> " + Arrays.toString(quickSort(fewUniques, 0, fewUniques.length - 1)) + "\n");

        int[] nearlySorted = new int[]{2, 3, 5, 7, 13, 11};
        System.out.println("original array ==>   " + Arrays.toString(nearlySorted));
        System.out.println("after quick sort ==> " + Arrays.toString(quickSort(nearlySorted, 0, nearlySorted.length - 1)) + "\n");
    }

    public static int[] quickSort(int[] arr, int left, int right) {
        if (left < right) {
            // Partition the array by setting the position of the pivot value
            int position = partition(arr, left, right);
            // Sort the left
            quickSort(arr, left, position - 1);
            // Sort the right
            quickSort(arr, position + 1, right);
        }
        return arr;
    }

    public static int partition(int[] arr, int left, int right) {
        // set a pivot value as a point of reference
        int pivot = arr[right];
        // create a variable to track the largest index of numbers lower than the defined pivot
        int low = left - 1;
        for (int i = left; i < right; i++) {
            if (arr[i] <= pivot) {
                low++;
                swap(arr, i, low);
            }
        }
        // place the value of the pivot location in the middle.
        // all numbers smaller than the pivot are on the left, larger on the right.
        swap(arr, right, low + 1);
        // return the pivot index point
        return low + 1;
    }

    public static void swap(int[] arr, int i, int low) {
        int temp;
        temp = arr[i];
        arr[i] = arr[low];
        arr[low] = temp;
    }

}
